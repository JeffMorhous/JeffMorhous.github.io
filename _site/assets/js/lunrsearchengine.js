
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 2,
    "url": "http://localhost:4000/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                                                                           Block Ads for Your Entire Home Network with a Raspberry Pi                              :               I got a Raspberry Pi for my birthday last year and have been suffering analysis paralysis, trying to figure out what I want to do. . . :                                                                                                                                                                       Jeff Morhous                                20 Jan 2020                                                                                                                                                                                                                                                                                                                  How I Use Todoist To Organize My Life As A Student                              :               Why Should I Care?:                                                                                                                                                                       Jeff Morhous                                07 Jan 2020                                                                                                                                                          All Stories:                                                                                                     How To Customize UITextView              :       So recently I‚Äôve been working on an iOS version of my Mock My Words app. It‚Äôs pretty simple in functionality so I wanted to compensate with a nice user interface. . . . :                                                                               Jeff Morhous                15 May 2020                                                                                                                                     How to Set Up Programmatic Interfaces in iOS              :       There are plenty of valid reasons to use storyboards or to programmatically lay out your interface. Storyboards let us quickly build out a beautiful interface, but face limitations and scale. . . :                                                                               Jeff Morhous                13 Apr 2020                                                                                                                                     How to Wirelessly Test Your App on Your iPhone              :       A good thing to note is that the mac you are using Xcode on and the iPhone (or iPad) you want to test on must be on the same network. . . . :                                                                               Jeff Morhous                03 Apr 2020                                                                                                                                     Switching From Android To iPhone              :       I have used Android since roughly 2011, and would definitely classify myself as a fanboy. Now that I do quite a bit of iOS development for work, I finally made. . . :                                                                               Jeff Morhous                27 Mar 2020                                                                                                                                     How To Handle College at Home              :       Are you one of the tens of thousands of college students who‚Äôve been displaced recently? Lots of people are talking, writing, and reading about their transmission to remote work, but. . . :                                                                               Jeff Morhous                16 Mar 2020                                                                                                                                     How I Bombed a Microsoft Interview              :       So I‚Äôve actually interviewed with Microsoft a couple of times. The first time I interviewed for a Software Engineering Internship, it was with a Microsoft engineer on my college campus. . . . :                                                                               Jeff Morhous                27 Feb 2020                                               &laquo; Prev       1        2        3      Next &raquo; "
    }, {
    "id": 3,
    "url": "http://localhost:4000/portfolio",
    "title": "Portfolio",
    "body": " MockMyWords:  Seen that meme of everyone's favorite cartoon character mOcKing wItH soMe aLteRnaTinG teXt? I turned it into an Android App in March 2019 and an iOS App in May 2020!    What Are The Odds:  Simple game where one person dares another to do a ridiculous task. The app adds to the fun by truly randomly generating the numbers, eliminating cheating. Android App in December 2018 and iOS App in May 2020.     Jack The Resume Ripper:  ACollaborated on a team of 3 for OSU's 2019 Hackathon to create a web app leveraging Vue. js, AWS Lambda, and Azure Cognitive Services to parse insights out of resumes. Focused on Front-End Design. You can see a demo here.     Study Buddy:  A fun iOS app for tracking study habits and reducing distractions. Created for a client, working to meet project requirements and deadlines. Utilized Core Data and monetized using AdMob. Published on the App Store in October 2019.   Get To Know MeHey there! I'm a Computer Science and Engineering Student at The Ohio State University. I love to create new things that make lives better, and learning as much as I can on the way. I've had the awesome opportunity to do iOS contracting, as well as web development internships in FinTech and healthcare! Outside of school and work, I like to play guitar, hike, work on cars, and act as a servant leader in my church. I‚Äôm always looking for the best opportunity to expand my knowledge and skill set while making a positive impact.                 "
    }, {
    "id": 4,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ ‚Äúsitemap. xml‚Äù   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/page2/",
    "title": "Home",
    "body": "{% if page. url == ‚Äú/‚Äù %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 6,
    "url": "http://localhost:4000/page3/",
    "title": "Home",
    "body": "{% if page. url == ‚Äú/‚Äù %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 7,
    "url": "http://localhost:4000/how-to-customize-uitextview/",
    "title": "How To Customize UITextView",
    "body": "2020/05/15 - So recently I‚Äôve been working on an iOS version of my Mock My Words app. It‚Äôs pretty simple in functionality so I wanted to compensate with a nice user interface. The main functionality requires that a user enter (or paste) in text of pretty much any size. Oftentimes iOS text entry with a UITextField, but that only offers single line input. For multi-line input, you have to use UITextView üòî. After throwing that in my app I was rather unimpressed with how it looked. So, I decided to put my own spin on it. It took a bit of research and I‚Äôm pleased with how it turned out so I thought I‚Äôd share with the community on how customize the UITextView object to your own needs. Create the UITextView: I‚Äôm building this app programmatically, so the first step is to instantiate the UITextView object. If you‚Äôre using a storyboard, you‚Äôll want to create an IBOutlet and then follow the other steps the same. I declared my UITextView at the class level of the view controller it‚Äôs used in, and the one-line looks like 1  **let** textBox = UITextView()Please note, all of the following code should be executed by viewdidload(), but feel free to extract it to a function and then call that function from viewDidLoad() Add it to the view: Next, you have to add it to the view hierarchy so it actually shows up. If you‚Äôre using a storyboard, skip this step. 1  view. addSubview(textBox)textBox. translatesAutoresizingMaskIntoConstraints = **false**Set the delegate: If you actually want your app to react to actions the user may take, you need to make your view controller extend UITextViewDelegate, and then have the following line in your configuration. 1  textBox. delegate = **self**Customize the textbox: You can use creative freedom here, but here‚Äôs how I laid out my textbox view. 1234567  textBox. autocorrectionType = . no  textBox. text = placeholderText  textBox. backgroundColor = . secondarySystemBackground  textBox. textColor = . secondaryLabel  textBox. font = UIFont. preferredFont(forTextStyle: . body)  textBox. layer. cornerRadius = 20  textBox. textContainerInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)Give it a shadow: Again, this is optional, but this is how I gave my textbox a shadow so it has a material design feel. 12345  textBox. layer. shadowColor = UIColor. gray. cgColor;  textBox. layer. shadowOffset = CGSize(width: 0. 75, height: 0. 75)  textBox. layer. shadowOpacity = 0. 4  textBox. layer. shadowRadius = 20  textBox. layer. masksToBounds = **false**Tell your view where to put it: Your method for doing this will definitely vary, but I used 1  NSLayoutConstraint. activate([insert your array of constraints here])And that‚Äôs it! You have a custom textbox that kind of floats above the view you put it in. "
    }, {
    "id": 8,
    "url": "http://localhost:4000/how-to-set-up-programmatic-interfaces-in-ios/",
    "title": "How to Set Up Programmatic Interfaces in iOS",
    "body": "2020/04/13 - There are plenty of valid reasons to use storyboards or to programmatically lay out your interface. Storyboards let us quickly build out a beautiful interface, but face limitations and scale problems. If you have a team working on an app, then Storyboards can get messy and hard to keep track of with version control. Once you decide that storyboards aren‚Äôt the tool for you, Xcode takes some tinkering to set things up to lay out your interface in Swift. After you create your project, First, delete the Main. storyboard. Yup, delete it entirely. Then, we have to delete any reference to it- The first spot we need to take care of is the reference to Main. storyboard in Info. plist ‚Äî Go ahead and delete the entry by clicking the minus sign. The last place it‚Äôs referenced is in the Deployment Info section of your project settings. A dropdown for Main Interface will still say Main. storyboard, Select the empty option in the dropdown. Next, add the following to your SceneDelegate. swift 1234guard let windowScene = (scene as? UIWindowScene) else { return }window = UIWindow(frame: windowScene. coordinateSpace. bounds)window?. windowScene = windowScenewindow?. rootViewController = ViewController()Now, you can specify your actual layout in ViewController. swift! You‚Äôre all set up to implement the design of your dreams programmatically, and here‚Äôs a quick reference to help you get the hang of it! "
    }, {
    "id": 9,
    "url": "http://localhost:4000/how-to-wirelessly-test-your-app-on-your-iphone/",
    "title": "How to Wirelessly Test Your App on Your iPhone",
    "body": "2020/04/03 - A good thing to note is that the mac you are using Xcode on and the iPhone (or iPad) you want to test on must be on the same network. Next to the build button, go to select a device/simulator. Here, mine just says ‚ÄúGeneric iOS Device‚Äù Once you click on it, select ‚ÄúAdd Additional Simulators‚Äù The result will be a modal that looks like this.  Go ahead and switch over to devices. Plug your device in and unlock it, and it should appear. Go ahead and click the checkbox that says ‚ÄúConnect via network‚Äù and voila! You may have to restart Xcode, but you should now be able to run your apps on your device without physically connecting it! This is a pretty small trick but it may save you tons of time, and honestly it‚Äôs just too cool not to set up. Hope this helped, and if you ran in to trouble, let me know below! "
    }, {
    "id": 10,
    "url": "http://localhost:4000/switching-from-android-to-iphone/",
    "title": "Switching From Android To iPhone",
    "body": "2020/03/27 - I have used Android since roughly 2011, and would definitely classify myself as a fanboy. Now that I do quite a bit of iOS development for work, I finally made the jump over to using an iPhone full-time. Now that I‚Äôve switched, I don‚Äôt know if I could ever go back. It‚Äôs not like I was completely oblivious to the iPhone before I switched ‚Äî I‚Äôve even been using an iPad for years and making iOS apps for quite some time. I‚Äôve just been too reluctant to switch because I was so comfortable with my Android phone. In fact, the Galaxy S10e came out after the iPhone XR, so the iPhone XR is actually an older device! So what is it that makes me so pumped to now have an iPhone as my daily driver? ü§î Big-name apps work betterApple definitely has a majority market share of smartphones in the US. So that means, companies with a focus on the United States have an incentive to put more resources into their iOS apps, as opposed to Android. I‚Äôve always known this and been kind of annoyed as an Android user. Now that I‚Äôm using an iPhone, I‚Äôm starting to really appreciate it ü§© A lot of apps look and act exactly the same on both platforms, and hats off to those companies. However, a lot of smaller things come to the iPhone first, and their iPhone apps often end up being more polished than their Android counterparts. Shockingly enough, this is the most evident in banking/finance apps! Things just work like magicAndroid‚Äôs open ecosystem is incredibly open and customizable. I‚Äôve always loved this, and its one of the reasons I have stuck with it so long. However, this often results in manufactures or carriers making unnecessary changes to the OS for their own benefit (looking at you, Samsung). The Android software is built to fit an enormous range of hardware, and it‚Äôs begun to feel like a one-size-fits-none situation. Once I stopped being able to articulate what I specifically liked about Android over the iPhone, I decided to make the switch at least temporarily. I couldn‚Äôt be happier with the consistency of experience that Apple has provided. Creating software with hardware in mind, and vice versa has clearly evident benefits. I‚Äôve been using the iPhone for a little over a week now, and haven‚Äôt experienced any crashes or even lag. Even FaceID works 100 times more consistently than its Android counterpart. The emphasis on design is notableI‚Äôm an engineer, so design isn‚Äôt exactly my strong suit.  I used to not even care about design, but the more I use computers and phones in my life, the more I want to actually enjoy the experience.  This is especially magnified as I dive into a profession driven by creating positive software experiences for users. It‚Äôs become pretty apparent that Android is engineered and then designed, while iOS is designed and then engineered. Color schemes, animation, and even sounds have surprised me with the level of detail invested. iMessage is without a doubt the most obvious example of this, specifically with the whole screen effect features ü§Ø Beyond that, Emoji is just better. I used to never use emoji. Then I started using them on my mac because my girlfriend pointed out how much better they appeared than any other implementation I‚Äôve seen. Emoji are supposed to communicate something better than text, and Apple really nails the fun element here! Syncing with my MacBook is too convenientHaving iMessage on both my phone and my MacBook is a pretty novel feature. Not incredibly useful but definitely nice to be able to respond to texts in the middle of using my Computer without having switch devices. Airdropping between my phone and computer has been pretty great too! Being able to transfer documents, pictures, and even links back and forth without emailing them is a bit of a time saver. Just today, I got sent a link to a site that looked like garbage on mobile. All I had to do was open safari and click on the tab (from my MacBook) that was open on my iPhone, and ba-bam, I was in business on my MacBook. All of the syncing is definitely not perfect. There‚Äôs a bit of a lag between my phone and computer, and I‚Äôve often had my computer be ringing after I already answered a call on my phone. But still, the sync between the 2 is pretty cool. Privacy üîêI‚Äôll be honest, Apple‚Äôs stance on encryption is bold and attractive to me as a consumer. They‚Äôve shown in public that they‚Äôre willing to stand up to even the government to protect their users‚Äô information, and that‚Äôs priceless in a time where the economy runs on personal information. If you use an Android phone, you‚Äôre all but consenting to have Google track everything about you. A great side effect of shifting to the iPhone is the option for more choice over disclosure! Making the switch from Android to the iPhone was a lot like my jump from Windows to Mac. It took me years to work up the guts but I‚Äôm definitely not regretting it. Yes, Apple charges significantly more for products that compare equally on a technical level. The ‚ÄúApple Tax‚Äù is very real, and a barrier for many. If you‚Äôre trying to decide if that price jump is worth it for you, talk to some friends, and ask them what they like about their iPhone! Go into the Apple store and get hands-on with them üë®‚Äçüî¨ "
    }, {
    "id": 11,
    "url": "http://localhost:4000/how-to-handle-college-at-home/",
    "title": "How To Handle College at Home",
    "body": "2020/03/16 - Are you one of the tens of thousands of college students who‚Äôve been displaced recently? Lots of people are talking, writing, and reading about their transmission to remote work, but not much has been said about remote learning. A lot of the same concepts apply, but a lot differs! I was actually homeschooled for 12 years, which involved some online classes, and a lot of self-direction. In college, I‚Äôve already taken a few online classes. Even my job has been remote for quite some time, and now (like you, I‚Äôm assuming) I‚Äôm forced to finish out my entire academic semester online as well. I‚Äôm not super worried about the transition, solely because it doesn‚Äôt change my lifestyle all too much. There‚Äôs still some adjustment, mostly being back home and coordinating with my parents, one of which is also WFH (working from home) in this tense time. Being left to your own devices AND being locked in your house requires a ton of self-discipline, and can definitely get to you really fast. Everyone is different, but there are some things that I know help me to be as productive and healthy as I can when working remotely. Here are some tips that I hope help you be as successful as you can. Build strong habits early, and you‚Äôll be thanking yourself when online exams roll around the corner ü•¥ Recognize the situation There‚Äôs no doubt the world is hurting right now. You‚Äôre not alone. People everywhere are having their lives turned upside down. Remember, the world is not ending, but the steps we‚Äôre taking are indeed stopping it from ending. We‚Äôve all had the rug pulled out from under us. Your professors and peers are all in the same boat as you. We didn‚Äôt sign up for this (well some did, but if you signed up for online classes to begin with you probably could write this article). Be patient with your faculty as they work to deliver you the education that you paid for. Be patient with yourself ‚Äî it would be really unusual to be at your peak productivity during a time of worldwide crisis. Create a space for schoolSure, watching lectures in bed and studying on the couch is sick and all(no pun intended), but it‚Äôs going to lead to devastating productivity losses. Some people can thrive wherever, but as we spend more and more time in our homes a-la quarantine, it becomes increasingly important to remind your mind where work does and doesn‚Äôt happen. I work best in a closed room with a clean desk and an nice chair. But that‚Äôs not going to be possible for everyone all the time. Not everyone has a desk, I‚Äôm posted up at my parents kitchen table üëå. Just try your best to dedicate some physical space to your education, as it will certainly help you dedicate some mental space. Music and headphones are your friends for isolation, as it will help your drown out others sharing your school space. Create a time for school This isn‚Äôt ‚Äúspring break forever,‚Äù though it still feels like that. It‚Äôs really important that you dedicate time during your day to ‚Äúlectures‚Äù in whatever form they‚Äôll take, in addition to the obligatory studying and homework. Turn off your phone, shut the door if you can! Dedicating time to school will help you strike a healthy work-life balance. There‚Äôs no such thing as just leaving the tv on ‚Äòin the background‚Äô while you do practice exams. If you put your focus on school during the time you promised yourself you‚Äôd be doing it, your free time will be yours to spend entirely. Use a plannerKeeping track of online classes is stupid hard. Professors may or may not remind you of things that are due, and it‚Äôs certainly not their responsibility to keep you organized. Write everything down and prioritize your days. A lot of people find it easiest to do this digitally ‚Äî I use Todoist, and I already wrote a piece about how it helps me stay organized. Communicate with your familyIf you‚Äôre at home for the long haul like me, this is going to take some adjusting for everyone. Be clear with them that you need undisturbed time to dedicate to your studies in order to succeed. It‚Äôs crazy hard to get deep work done if you‚Äôre constantly being interrupted, even if the interruptions are important. If you attention is absolutely need during your school time, help you family understand how to get that message across while still respecting your headspace. Get DressedIt‚Äôs easy to just lounge around in pajamas all day, and that‚Äôs totally fine. However, if you get up and get ready for the day like you were going to be out and about, it helps remind your mind that this isn‚Äôt a snow day. Hygiene and lifestyle habits will do wonders for your mental health! All of these tips not withstanding, remote work gives you the freedom to break these rules when needed. Use this wild pandemic to take advantage of the autonomy remote work offers. Who knows, you may discover that your top job desire is the opportunity for remote work. "
    }, {
    "id": 12,
    "url": "http://localhost:4000/how-i-bombed-a-microsoft-interview/",
    "title": "How I Bombed a Microsoft Interview",
    "body": "2020/02/27 - So I‚Äôve actually interviewed with Microsoft a couple of times. The first time I interviewed for a Software Engineering Internship, it was with a Microsoft engineer on my college campus. It was a great time, super challenging, and also terrifying. We talked very technically ‚Äî it was your classic whiteboard interview. I was handed a piece of blank paper and asked to write code that performed a specific operation (can‚Äôt go into too much detail ü§´) on a binary search tree. The question was well beyond my skillset at the time, and I felt like I was drowning in sweat. After talking with the interview to clarify constraints, I walked him through the problem in several example graphs. This helped me approach my algorithmic solution, which I wrapped up with just minutes to spare. I was told that my feedback could be used for up to a year, so when recruiting opened up for the year, I would likely be pushed on to the next round (which for Microsoft, I believe is an on-site). Over the next several months, I studied like it was my job to ensure I wouldn‚Äôt be sweating through my shirt when I got the opportunity to interview again. I spent quality time with everyone‚Äôs favorite resources ‚Äî Cracking The Coding Interview and Leetcode. I spent all of my preparation time preparing for questions like the one I had received that initial interview. But then my recruiter left Microsoft üò¨: I was told by the new area recruiter that I‚Äôd have to submit my application and begin again. YIKES. Although I was bummed, it wasn‚Äôt the end of the world, and I applied again! I actually went a month or two without a reply, until I got ahold of someone internally who gave the new recruiter for my area a nudge. No hate on these recruiters though, their job is very challenging and I don‚Äôt envy the sheer amount of candidates they‚Äôre responsible for. Anyways, I was eventually contacted to schedule an initial phone screen! I prepared for this just like I had been all summer, leetcoding like it was my job. So you may not be surprised that this phone screen was not at all what I was expecting. The phone screen was not very technical.  It seemed like an initial get-to-know-you style call, to see if I was a real human being who could hold a conversation.  Usually, I‚Äôm alright at that. But I was so caught off guard by the contrast of this to my first interview that I choked, and I choked hard. During that phone call, I was not a real human being who could hold a conversation. Almost immediately, he asked me the first question,  Why do you want to work at Microsoft? Wait, my last interview didn‚Äôt care what I thought about Microsoft??? He just wanted to see how comfortable I was with data structures! I wasn‚Äôt even kind of ready! This question is so fundamental to a job interview, I‚Äôm embarresed just thinking about how I struggled to respond. Yes, I thought I wanted to work at Microsoft, but at that time, I couldn‚Äôt articulate why. Then next question came ‚Äî  What‚Äôs your favorite Microsoft product, and what would you change about it? I was sweating. I switched to Mac a few years ago, how did he know? üò©Thankfully I remembered that my IDE of choice, VS Code, is a Microsoft product! I love it and happily described how perfect it was. So needless to say I wasn‚Äôt prepared for him to ask ‚Äúwhat I wanted to change about VS Code‚Äù. Change? I loved it! At this point I was really hoping that he would throw me a question that would allow me to show off my practiced binary tree knowledge. But yet again, another curveball was thrown my way.  Tell me about a project where you used a data structure and algorithm üò© I‚Äôve done plenty of simple personal projects and plenty interview-style questions involving data structures and algorithms ‚Äî but it immediately dawned on me that I never combined these two. My theoretical knowledge of algorithmic concepts was definitely siloed into the domain of interviewing. I struggled to describe how I used basic array sorts to populate iOS tableviews, and this definitely didn‚Äôt thrill my interviewer. The biggest mistake I made in this whole process was making a blanket assumption my ‚Äúphone screen‚Äù would be exactly like my previous interview that Spring. I wasn‚Äôt prepared for a question as straightforward as ‚ÄúWhy do you want to work here‚Äù! I didn‚Äôt over-prepare, I prepared for the wrong thing entirely. I assumed that I only had 1 area to improve in, and was proven sorely wrong. Honestly, I probably wouldn‚Äôt have hired me after that call either. But this article isn‚Äôt a pity party for myself. It‚Äôs a reflection of what caused me to present myself so poorly. Yes, I failed this interview (with flying colors üôÉ). But you can be assured that I won‚Äôt make that mistake again. Never again will I sit down for an interview (or even an info meeting) without internalizing my thoughts about the company and how I would contribute.  ‚ÄúSuccess is stumbling from failure to failure with no loss of enthusiasm. ‚Äù‚Äï Winston S. Churchill "
    }, {
    "id": 13,
    "url": "http://localhost:4000/interviewing-for-a-software-engineering-internship-at-amazon/",
    "title": "Interviewing For a Software Engineering Internship at Amazon",
    "body": "2020/02/15 - Why would I talk about Amazon when I‚Äôve interviewed at more than a dozen companies? Well, it‚Äôs one of the most valuable and influential brands on planet earth ‚Äî and software engineers are lining up at the door for a chance to join the team. The company boasts stellar compensation, benefits, and the opportunity to work on monumentally impactful code. Because of all this, it‚Äôs incredibly challenging to get a full-time role, let alone an internship. Plenty of candidates who are more than qualified get turned down, because the program is that selective! Their internships are among the most sought after in tech, and they‚Äôre hiring like crazy. Getting hired is a matter of persistence, hard work, and (unfortunately) luck. It‚Äôs important to note that the steps I outline here are the steps that I took, and your experience may vary a bit. What worked for me may not work for you, and vice versa. Also, I won‚Äôt go into verbose detail on the specifics of interview questions, as that would be unfair to Amazon and probably violate an NDA of some sorts. Step 0: PrepareYou definitely don‚Äôt want to go into this blind, so the more time you have to prepare, the better. Once fall comes around though, don‚Äôt delay applying. You will get your choice for the most part on working with Java, Python, C, C#, or C++. Stick with your most comfortable language and become really proficient at using it to work with data structures. In the early stages of the interview process, knowing how to work with loops, arrays, and strings is vital. By the 3rd round however, you must be prepared to use more complicated data structures, like Sets, HashTables, and Queues. And while it doesn‚Äôt seem to be a huge deal in the assessments early on, understanding time and space complexity is a vital skill. There are plenty of free online resources to help you in becoming proficient with the types of questions Amazon will throw your way. My favorite practice tool is Leetcode, which has countless questions that have been seen in real interviews. Another popular resource is Hackerrank, which is a similar tool. If all of the data structures that I mentioned sound foreign to you, don‚Äôt fret! It‚Äôs probably best to begin with a more academic approach.  Cracking The Coding Interview is my favorite book for preparing for interviews, and it comes with hundreds of practice problems. Step 1: ApplyYou have 2 options here: you can apply cold, or you can try to find someone to refer you. I‚Äôve gotten an interview at Amazon both ways, but when a friend was kind enough to refer me the second time around, I was offered the first pre-screen almost immediately.  The timeline you‚Äôre looking at is aggressive. For a summer internship, you‚Äôll want to be sure to apply by October of the previous year. Do your resume prep, find online resources and get feedback from peers and mentors! Once you‚Äôre ready, you can apply online. If you‚Äôre fortunate enough to have someone referring you, you‚Äôll likely hear back within days. If not, there‚Äôs almost no telling. The first time I applied, I actually didn‚Äôt get pushed forward until Spring üòÖ. The whole process took about a month for me, which feels like forever, especially when you‚Äôre excited! So the somewhat-obvious truth is that you don‚Äôt put all your eggs in one basket. Even if you‚Äôre the most qualified candidate on the planet, any company could pass you up for a number of reasons. Apply to dozens of other internships! After a few, it‚Äôll become super natural and easy for you. Once you begin the assessment process, it is without a doubt in your best interest to complete them all as fast as possible. You wouldn‚Äôt want to go through all this effort only to miss a deadline, or worse ‚Äî find out that they hired their max # of interns even though you finished the assessments in time. Step 2: Pre-Screen #1 üêõIf you pass the Resume screen, congrats!! The next step is typically a series of prescreens. To be respectful of your time, Amazon will send out the pre-screens in a series of progressively challenging stages. If you pass the first, you‚Äôll get the second, and so on. You‚Äôll get an email with some info on how to access and complete the pre-screen, and you‚Äôll have under a week to execute. The assessment is online, and they‚Äôll ensure you are working on your own by requiring access to record your camera, screen, and microphone. Without going into too much detail (wouldn‚Äôt want to spoil the fun üòâ), you‚Äôll spend most of your time finding and fixing bugs in code, already written in your choice Java, C++, or C. It can seem daunting at first but don‚Äôt get freaked out. I burned through 80% of my time before I even found my first bug, but once I spotted and fixed it, all of the others became immediately obvious to me. Most people try to overthink this stage, but it‚Äôs really just a test to see if you‚Äôre familiar with programming! Step 3: Pre-Screen #2 ü§îIf you were able to fix ‚Äúenough‚Äù of the bugs in the first assessment, you‚Äôll get an email in a few days with instructions for the second. No one is quite sure what constitutes ‚Äúenough. ‚Äù I solved all of them, and I‚Äôve heard of people getting pushed on having solved 75% of them. In this section, you‚Äôll be asked to solve puzzle-like problems using your choice of Java, Python, C, C#, or C++ (Technical part of the interview). After a few of those, you‚Äôll go through a ‚Äúwork-style‚Äù simulation, which constitutes the behavioral part of the interview. For this part, having a working answer seems to be more important than efficiency. Obviously, if you can do both, DO IT. But I only had time to implement brute force solutions that passed most (a few pesky ones trailed) of the test cases ‚Äî and that still got me through! This stage has questions that match what Leetcode typically classifies as ‚Äúmedium‚Äù problems, and there will probably be about 3 of them. If you can quickly solve medium level problems on Leetcode, this will be no sweat for you. If you find them tricky, put in some practice and then give it your best shot! Step 3: Pre-Screen #3 ‚è±This last part is brutally long, at an estimated 2. 5 hours to complete. It consists of a workday simulation and a logic test. The workday simulation is actually both fun and stressful. It‚Äôs very much made to be game-like while assessing how you perform under pressure. You‚Äôll be presented with problems (like missing deadlines, buggy code, arrogant coworkers), and asked you how‚Äôd respond. It‚Äôs important that you‚Äôre honest, and if your responses line up with Amazon‚Äôs leadership principals, you‚Äôll likely pass no problem. The last part is a logic test, which feels a lot like the ACT had a baby with a Mensa test. Likely designed to get a feel for how you think, the test is really hard to prepare for! If you really want to get a feel for what it‚Äôll be like, practice with some fun Logic/IQ tests online. Step 4: Final Interview üôåIf you performed well enough on all 3 steps, a recruiter will likely reach out to schedule a phone interview! Even getting here is a great accomplishment, so congratulate yourself on a job well done. Ultimately, I turned down that final round interview because by that point, I had happily accepted an offer at another company. Once I knew that I wouldn‚Äôt be taking the job even if it was offered to me, I let the Recruiter know so as to respect their time. Amazon is a great company, but I ended up going somewhere that feels like a better fit for me. In all honesty, there‚Äôs no telling how I would have performed on that final interview! Because I didn‚Äôt follow through on the last stage of the interview, I won‚Äôt speak too much to it. I hear they typically ask one or two questions similar to the ones you saw in the second assessment. The biggest difference is that you‚Äôll want to explain your design decisions to the interview to show an understanding of programming principals, rather than just cranking out code. Remember that the person you speak with wants to see you succeed, so don‚Äôt be intimidated. Ask lots of questions and don‚Äôt be afraid to say when you don‚Äôt know something! "
    }, {
    "id": 14,
    "url": "http://localhost:4000/start-a-new-application-with-vuejs-and-vuetify/",
    "title": "Start a New Application with Vue.js and Vuetify",
    "body": "2020/01/27 - Vue. js is an open source JavaScript framework created and maintained by a vibrant and passionate community. Although it‚Äôs relatively new to the web apps world, Vue is quickly gaining ground on the more popular alternatives, React and Angular. While remarkably useful, Vue. js by itself isn‚Äôt necessarily pretty. Sure, we could build out all the components we need, customizing CSS to fit our design patterns, but there‚Äôs a far easier way.  Vuetify is a component framework that follows Material Design concepts. In short, it‚Äôs a massive UI library that plays really nicely with Vue. Things like forms, buttons, app bars, and even spinners can be used almost instantly, accelerating our front-end labor to an unbelievable pace. Beyond this, it all but ensures we‚Äôre following a consistent design pattern, which boosts our user experience! Now, let‚Äôs get down to it. Step 0 (optional): Version Control üí™: It‚Äôs always a good idea to start version control when you start your project. Head over to github. com and create a new repository with whatever name you want. Click the ‚ÄúInitialize this repository with a README‚Äù button, then hit ‚ÄúCreate Repository‚Äù  Creating a new repository on Github Next clone your repo either via SSH or HTTP from the command line with 1$ git clone &lt;the-link-github-provides&gt;In your terminal, move into the directory that just got cloned with 1$ cd &lt;my-repo-name&gt;If you‚Äôre not familiar with git and want to be, ‚ÄúGit-it‚Äù is a wonderful tutorial that runs you through most everything you‚Äôll need to get started. Step 1: Install Vue Cli: Vue CLI (command line interface) is by far the fastest and easiest way to create the scaffolding needed for a Vue. js project. There‚Äôs some documentation on installing it here, but if you have npm installed already, it‚Äôs as simple as running the following in our terminal 1$ npm install -g @vue/cliStep 2: Create Vue Project: Now that we have the command line interface installed, to create a new project, we just need to run the following in the command line. 1$ vue create my-appYou should replace ‚Äúmy-app‚Äù with your desired app name of course! You‚Äôll be prompted for some customization options here, but I‚Äôve always been happy with the defaults.  Fire up your code editor of choice. For most things, I use VS code. It‚Äôs lightweight and incredibly customizable, not to mention free, perfect for Vue. js development. You now have a functional Vue. js app created! This is a great place to commit üòÉ Step 3: Add Vuetify üîÆ: Move your working directory into the app that was just created with (of course, replace my-app with the name you gave the vue create command) 1$ cd my-appThen, we can set up our app to use Vuetify by simply running the following command 1$ vue add vuetifyTo see your new beautiful web app, run the start script (either yarn serve or npm run dev) and view it in your browser! Just like the command line tool recommends, this is a great place to commit your changes Step 4 and Beyond: Adding Components and Customization: Now that you have Vuetify hooked up to Vue, adding crazy complex and appealing components is as easy as one liners. Go through the documentation and see what components might be useful to you. Take a look at the resources below to see what you can do. Actually getting components to do things is more of a Vue. js skill, so their docs and various tutorials will be helpful to you. Resources üßê: The Vue. js Website and Docs The Vuetify Website and Docs Git-it Tutorial "
    }, {
    "id": 15,
    "url": "http://localhost:4000/block-ads-for-your-entire-network-with-a-raspberry-pi/",
    "title": "Block Ads for Your Entire Home Network with a Raspberry Pi",
    "body": "2020/01/20 - I got a Raspberry Pi for my birthday last year and have been suffering analysis paralysis, trying to figure out what I want to do with it. I recently came across some open source software called Pi-hole, that boasts the ability to block ads for your entire network. Perplexed, I had to see how this worked, so here‚Äôs how I set up my Raspberry Pi to act as a black hole for all things advertisement related. Not only will you experience a (mostly) ad-free internet, but things like Smart-TV‚Äôs and other ‚Äúsketchy‚Äù analytics tools won‚Äôt be able to send their data home.  Hurray privacy! If you have any questions, leave a response below or feel free to tweet me! Step 1: Aquire Hardware üñ•The Raspberry Pi is an incredibly cheap computer, which makes it a great candidate for such a specific task. I‚Äôll put affiliate links to each of the items that I purchased below, for your convenience. I have the Raspberry Pi Model 3 Model B, which costs roughly $50. I actually bought a kit that has a power supply and case, which you may want to do as well. It‚Äôs wireless, so I didn‚Äôt need an adapter. However, if you buy a model without WiFi, you will need to either wire it into your router with an ethernet cable or buy a WiFi adapter. You‚Äôll also need a microSD card to store the operating system (more on that later). If your computer doesn‚Äôt have an SD Card Reader, you‚Äôll need an SD card reader. If you don‚Äôt have it already, you‚Äôll need a simple keyboard. I‚Äôm going to assume you have some kind of HDMI display available, like a relatively modern TV, but if you don‚Äôt you‚Äôll need that too.  (There is a way to set up a Pi without a keyboard, mouse, or even a screen. It‚Äôs called a headless setup, and if you do this, then you can go ahead and skip to step 4) Step 2: Install An Operating System üë®‚ÄçüíªThe Raspberry Pi is pretty bare-bones. You can choose your operating system, and I went with Raspbian, an open source port of the Linux operating system.  You can find the downloads here ‚Äî it‚Äôll take a hot second, so go ahead and hit download and feel free to read ahead. Put your microSD card in your computer directly or through whatever adapters necessary. An important note is that I‚Äôm on mac, so my instructions here will be as such.  If you‚Äôre on Windows, here‚Äôs some more generic instructions. Download balenaEtcher to help us install Raspbian on the SD card.  Run the . dmg to install it and fire it up.  Click on the blue ‚Äúselect image,‚Äù and find the . iso file of Raspbian that you downloaded. Ensure that the center selection is set to your SD card, and hit FLASH! Again, this will probably take a minute ‚è∞ Finally, eject your SD card and put it in your Pi. Plug in your monitor/TV, keyboard, and mouse Step 3: Customize Some Pi SettingsThe Pi will ask you for your country and timezone, and then to change the default password ‚Äî which you‚Äôll definitely want to do for security reasons. Next, your Pi will probably want to update. Again, for security, go ahead and let it do that.  This is probably the longest wait. You‚Äôll also want to enable SSH, so you can control the Pi remotely üòÉ: To do this, open up the terminal in your pie by clicking the icon in the top left corner. Run the following command to get access to ssh (all of these should be run in your pi‚Äôs terminal, not your main computer) sudo apt get install ssh Enable it with sudo /etc/init. d/ssh start Set it to enable ssh every time it boots up with sudo update-rc. d ssh defaults To get your Pi‚Äôs IP address, run hostname -I Now we switch back over to your mac‚Äôs terminal, where you run the following: ssh pi@YOUR. PI. IP. ADDRESS And BINGO, enter your password and you now have remote access to your Raspberry Pi. Note: It‚Äôs also a good idea to change your default SSH port, but we won‚Äôt go over that here. Step 4: Install Pi-holeEither in your Pi‚Äôs terminal or your computer‚Äôs terminal connected to the Pi via SSH, run the following command from Pi-hole‚Äôs website to install it:       curl -sSL https://install. pi-hole. net   bash   The installer will run and ask a bunch of questions. It‚Äôs okay to choose the defaults, but feel free to customize like I did. When the installer finishes it‚Äôll show you the password it selected. Note this and copy it, then change the web dashboard password by executing: pihole -a -p Step 5: Configure Devices or RouterNow that your Pi-hole is acting as a DNS server, we need to make sure that your devices use it instead of your ISP. You can do this on a per-device basis, but I‚Äôd recommend changing it at your router. That way, every time a device on your network makes a DNS request, it will first go through the Pi-hole. This step is very specific to the brand of router, so I won‚Äôt go into detail. Essentially you need to tell your router to treat your Pi-hole as a DNS server, rather than your ISP. You should also reserve a static IP address for your Pi to ensure it‚Äôs IP does not change because this would break your setup. And Voila, enjoy your ad-free internet! üôå Optional: How Pi-hole Works üéìNormal Ad-Blockers allow advertisements to load and just hide them from your view. Once you‚Äôve gotten the Pi-hole up and running, advertisements will stop dead in their tracks, before they even begin to download. Pi-hole is a very specific DNS sinkhole. DNS stands for Domain Name System, and it is the protocol for connecting names (like medium. com) to IP addresses (104. 16. 120. 127), which is where websites/servers really live on the internet. A DNS sinkhole acts in place of your usual DNS provider to provide false results. This pretty much breaks your internet ‚Äî NEAT! With Pi-hole, everything that isn‚Äôt an Ad gets forwarded to your DNS provider, but if the domain name is in Pi-hole‚Äôs blacklist (which is customizable for the nerdiest among you), then the Pi-hole sends back a fake IP address. So you visit a website and it loads. Next, the website asks its ad provider for ads, and Pi-hole says ‚ÄúWhat ad provider? That doesn‚Äôt exist. ‚Äù And boom your ads are gone. This can actually speed up your network, as you won‚Äôt be using as much bandwidth. An interesting note is that Pi-hole won‚Äôt kill youtube ads, as youtube serves its content and advertisements from the same DNS, so killing youtube ads would also kill youtube. "
    }, {
    "id": 16,
    "url": "http://localhost:4000/how-i-use-todoist-to-organize-my-life-as-a-student/",
    "title": "How I Use Todoist To Organize My Life As A Student",
    "body": "2020/01/07 - Why Should I Care?: Failing to plan is planning to fail.  I stand by the idea that careful planning is THE KEY to being successful at anything you want to do. Investing time and energy into a carefully curated planner (as well as calendar) will pay dividends on your way to success. Keeping up with this will let you get done the things you want, in the midst of getting done the things you must. I have a lot going on. I‚Äôm a student, an app developer, a freelance developer, a roommate, a job seeker, a boyfriend, the list goes on. I used to keep all my school assignments in a little planner notebook, and pencil in other stuff for life. All too often, this would lead to confusion and chaos, as I forgot important things that weren‚Äôt related to school, things I actually wanted to do more than homework. Then I found Todoist. Todoist is a handy application that I have on my phone, iPad, and Macbook. It lets me dump all those tedious tasks into one place, so my mind is free to work unencumbered by the stress that I might have something coming up that I forgot about. How I Organize My ‚ÄúProjects‚Äù: During the first week of the semester, I dump everything from every class into Todoist, and then never think about that again. It‚Äôs a ton of work upfront, but I put in every homework assignment, project, paper, and exam into Todoist.  I have quite a few projects, because I try to never add a task without assigning it to a project. The first one is Self Care, which a lot of general stuff falls into. The next is Financial, where I keep track of things like bills and have tasks to review my budget. The next is Career, where I track things I do for my long term career, like interview prep, reading, or writing articles like this one. The next is School, and here I put all administrative school tasks üò•. Beneath it, I have a project for each of my classes ‚Äî I‚Äôm super excited for web apps this semester! After that, I have a project called Freelancing, where I put administrative stuff for the freelance development work I do (sending invoices, finding clients, etc). I have a subproject for each client I‚Äôve had beneath that as well. I also have a project for all my Apartment necessities, like chores and meal prep. Another project is for My Girlfriend, where I‚Äôll put little things like picking up flowers or planning dates.  General Tech is used to hold things like sorting through photos, tidying up my hard drive, and other small computer stuff. Lastly, Side Projects holds todo‚Äôs for different side projects I work on, like Mock My Words. You probably noticed that I have emoji‚Äôs next to each project, this is a must for keeping things nice and positive ü§©. Combine this with color coordination, and auditing how you‚Äôre spending your time becomes super easy. Some days I‚Äôll have a dozen tasks, some days I‚Äôll have none (vacation is great). The important thing, is that at the end of the day, all your tasks are either complete or rescheduled. This ensures that you don‚Äôt have a ton of overdue tasks just piling up, because thats discouraging and MESSY. Adding Hard Deadline Tasksüë®‚Äçüíª: A planner like this is most helpful when you have access to it all the time. Having it on my phone, iPad, and computer ensures that whenever I find out I need (or want) to do something, I can jot down whatever it is really quick, and then not have to worry about remembering it. You‚Äôd be surprised how much mental capacity this frees up. Todoist is crazy smart. It will recognize plenty of keyboard shortcuts. Let‚Äôs say a professor for my sociology course assigns a paper due on February 10th. . Here‚Äôs what I‚Äôll type into Todoist ‚Äî (if you‚Äôre on a computer, you can hit ‚ÄúQ‚Äù to open the new task prompt)  Paper Due #Sociology p1 Feb 10 This creates a task with the title ‚ÄúPaper Due‚Äù, puts it in the project ‚ÄúSociology‚Äù, gives it a due date of February 10th, and assigns it a priority 1. I use priorities because sometimes there‚Äôs not enough time in the day, and it‚Äôs nice to see what absolutely has to get done really easily. School assignments always get a priority 1 (p1), because I try to make a habit of doing those on time üòÜ . The priorities are also color coded red, yellow, blue, and grey in that order. Adding NO Deadline Tasks ü§î: Oftentimes, there‚Äôs something I just want to get done but it doesn‚Äôt necessarily have a due date. I just don‚Äôt want to forget about it. Todoist helps with that too! At some point recently, I did a website redesign. I put dozens of incremental steps for this as tasks in my ‚ÄúSide Projects‚Äù project, and ordered them in the order that I wanted to. Then, when I new I had some time to work on one of them, I‚Äôd tag it with ‚Äútoday‚Äù to add it to my daily list. Breaking Down Tasks üí°: If I have a big task, like a paper, it‚Äôs common that I‚Äôll add some subtasks to help me make progress towards it. Things like ‚ÄúWrite Comprehensive Outline,‚Äù ‚ÄúWrite 3 Pages of Rough Draft,‚Äù and ‚ÄúGo Over With Professor In Office Hours‚Äù ensure that I‚Äôm not procastinating. It can be incredibly deceptive to see something like ‚ÄúMail Letter‚Äù and ‚ÄúWrite 30 Page Paper,‚Äù thinking they‚Äôll take the same amount of time. Break things down! Then, assign those subtasks a lower priority then the main task, and give them each a due date! Before you ask, no this article isn‚Äôt an advertisement. This app has just been so helpful in helping me organize that I thought it would be great to share. I hope you find it as helpful as I have. By no means do I think my way is the only way when it comes to organization. It works for me, and it will probably work for you. But you know what would work even better for you? A system you tweak to your liking! "
    }, {
    "id": 17,
    "url": "http://localhost:4000/what-is-recursion-anyways/",
    "title": "What Is Recursion Anyways?",
    "body": "2020/01/03 - Has a problem ever seemed too overwhelming to you to think about? Most people would recommend breaking it down as small as possible to make it manageable, and that‚Äôs exactly what recursion is! Technically, recursion is ‚ÄúThe process in which a function calls itself directly or indirectly. ‚Äù If a function calls itself, we refer to it as a recursive function. At first glance, this seems like a nightmere. However, it can be an invaluable tool in solving programming problems. Let‚Äôs take a look at a famous search algorithm. Imagine you‚Äôre a teacher, and you have a stack of graded papers that you‚Äôve already sorted alphabetically by last name. If you were looking for the last name, ‚ÄúPatrick,‚Äù what would you do? Think about it for a minute‚Ä¶ One approach might be to start at the beginning of the stack, and flip through each paper until you found ‚ÄúPatrick. ‚Äù This is an example of a linear search, and it‚Äôs not always the fastest solution here. Another intuitive approach is binary search, which you‚Äôve likely utilized in real life without even knowing what it is. To do a binary search, you start by flipping to the middle of the stack and seeing where you are in the alphabet. If the name is before Patrick, you know that Patrick is on the bottom half of the stack. If the name you‚Äôre holding is after Patrick, you know that Patrick is in the top half of the stack. No that you know that, you just do another binary search on the appropriate half of the stack! You can repeat this process until you hit Patrick, and each binary search that you do will cut your total papers in half. If you started with 100 papers, you could have it narrowed down to 25 by only looking at 2 papers! This incredibly powerful but somehow still simple algorithm is likely the perfect example of recursion. For recursion to work, we need 2 things to be true::  For a small enough problem, we know the answer. (IE: When the name we‚Äôre looking at is Patrick, we‚Äôre holding the right paper) The problem set must get smaller every time we recurse (IE: We discard half our stack of papers)It‚Äôs also important to note that anything you can use recursion on could be solved without recursion. Once you wrap your head around the concept, crazy complex problems have simple and elegant recursive solutions. This is especially helpful when it becomes time to translate your abstract algorithm into code. Now that you know what recursion is, what massive problems will you solve one step at a time? Enjoy this article? Leave a comment below telling me what you think! This is part of my larger effort to improve my technical communication skills, explaining technical, nerdy topics in nontechnical, engaging ways! "
    }, {
    "id": 18,
    "url": "http://localhost:4000/what-programming-language-should-i-learn/",
    "title": "What Programming Language Should I Learn?",
    "body": "2019/12/21 - Learning programming is already daunting enough, you shouldn‚Äôt have to sweat wondering which language you‚Äôre going to pick up! For me, this question is all about momentum. It‚Äôs imperative to find something that lets you feel the magic of writing code quickly üòÆ It‚Äôs also radically important to learn a language that plenty of other people are using. This will make it easier to get help, and it will make your new skill that much more marketable! The 2019 Stack Overflow Developer Survey offers insights into what languages developers are using the most and is definitely worth a look. Here are 2019‚Äôs most popular programming, scripting, and markup languages: #1) Javascript #2) HTML/CSS (though this is markup, and not technically programming) #3) SQL (this is for databases, and we won‚Äôt look at it despite it‚Äôa ubiquitous nature) #4) Python #5) Java Holding this in hand, picking a language really boils down to why you want to learn to program, so we‚Äôll look at some common reasons. If you want to learn to program things quickly:  If you want to learn to program just for the thrill of it, Python is an incredible first choice. By far the easiest language to pick up, Python is number 4 on the list of most popular languages. Created for human readability, Python abandons countless weird syntax rules in favor of code that‚Äôs easy to write. The biggest example here is the replacement of semicolons for whitespace. One would think code being this easy to write would have some drawbacks, but Python has surprisingly few. Honestly, I wish I had learned Python as my first language. As I was learning to program in Java, all of the seemingly arbitrary rules that didn‚Äôt make sense to me presented a massive barrier. Python lets the coder focus on the logic of it all, which is what programming is really all about. The language is especially popular for text parsing, math, and statistics related tasks. This makes it that much more marketable outside of computer industries. In fact, I‚Äôve seen students studying physics and even finance using python. If you want to make apps,: Swift is without a doubt your fastest route there.  Swift was created by Apple in 2014, as a tool to make development for iOS and Mac easier and more efficient at the same time. The downside here is that you‚Äôll need to have a Mac to begin writing Swift code, as Apple has the ecosystem locked down. Swift honestly reads a lot like Python, as it features many modern language syntactic goodies to make learning it incredibly easy compared to other languages. Learning Swift can help you bring a cool app idea to life, start freelancing (making other people‚Äôs cool ideas for üí∞), or even land a full-time job as an iOS developer. Outside of the Mac and iOS development ecosystem, Swift isn‚Äôt that popular. This makes the choice to learn Swift really only makes sense if you‚Äôre learning to program so that you can make apps. If you want to make websites,: Then Javascript in tandem with HTML &amp; CSS is going to be the best option for you. Javascript is not Java, but it bears a lot of resemblances. It was created to run in the browser, pioneering the way for interactive websites. Over time, it‚Äôs evolved to power everything from beautiful front-end frameworks like React, to servers using Node. js! 3 things can seem like a lot, so just start with Javascript. There are plenty of resources just a google search away. HTML, or hypertext markup language, communicates to a browser how information should be presented to a user. After you‚Äôre comfortable with Javascript, learning HTML will be the easy part. Consequently, CSS tells the browser how to style the website, everything from colors to fonts. If you want to learn about data structures and algorithms,: Then Java is probably your best bet. Java is an older language, released in the mid-1990s. It‚Äôs incredibly powerful and equally harsh. Though not quite as harsh as it‚Äôs father, C, Java requires the programmer to write a lot of boilerplate code, which is code that does nothing other than set up things. Part of the reason for this is that Java is an object-oriented language. Object-oriented programming remains an invaluable skill for software design, but it often doesn‚Äôt make sense to try to tackle this concept without other core programming skills in place. Things like polymorphism, inheritance, and class constructors are hard to swallow and can discourage a new programmer. Beyond that, an excited new programmer could spend months mastering these concepts and never write code that actually does anything.  Isn‚Äôt that the whole point of programming? Well as it turns out, another incredibly interesting part of programming is data structures and algorithms. Computers organize information (data) in many different ways (called data structures) to maximize efficiency. Similarly, algorithms are sets of instructions that accomplish a specific goal, often working directly inside a data structure. These concepts are critical to computer science as a discipline, especially in academia (looking at you, fellow CS students). Beyond that, companies that work with massive data sets are always looking for ways to improve efficiency. Becoming familiar with data structures and algorithms is an absolute must if you want to join teams at Google, Facebook, Amazon, and the likes. While Java does involve a lot of boilerplate code and bulky syntax, its design makes understanding data structures that much more natural. Honestly, the most important thing here isn‚Äôt even what programming language you pick. As long as you go with something that interests you and lets you gain traction quickly, it doesn‚Äôt matter what language you start with! If for some reason in the future you decided it isn‚Äôt for you, you‚Äôve got the foundation to make learning a new language easy.  Learning to program, and learning a programming language are 2 different tasks.  Once you learn to program, any new language you pick up will be far less painful. Given all that, when friends ask me what language is the best to learn, I always default to recommending Python before I ask anything about why.  The truth is, I believe python is a solid choice to build a foundation in computer science, regardless of what you want to do. "
    }, {
    "id": 19,
    "url": "http://localhost:4000/how-to-land-an-internship-early/",
    "title": "How To Land An Internship Early",
    "body": "2019/12/02 - For university students studying Computer Science, Computer Engineering, Data Science, and related fields, internships are the most powerful career tool that we have. Internships provide a mutually beneficial relationship between students seeking experience and companies searching for reliable talent. ü§ù Many people complain about ‚ÄúNo job because no experience, no experience because no job,‚Äù a truly abysmal paradox. Internships are designed to find and train junior talent with little to no experience is your key to breaking that cycle! Why is it then, that most students wait until their third or even fourth year to start the search? The truth is, getting that first internship is the hardest. Once you have serious professional experience to point to, each job will likely come exponentially easier. If you can secure a position after your first year, your career search from then on will be that much more successful. It‚Äôs never too early (looking at you, freshmen), and it‚Äôs never too late! The narrative stands that ‚Äúcompanies aren‚Äôt looking to hire underclassmen. ‚Äù For a while, I believed this. But the truth is that companies are thrilled to take on students with the right characteristics early in their education. So here are the steps I took to get hired for a summer internship before I even finished my first semester of college. Getting Involved at SchoolAs students, we no longer stand out just for having stellar grades. Obviously that‚Äôs important, but it‚Äôs not all that employers care about. Use your free time to develop soft skills. Soft skills are personal attributes that enable someone to interact effectively with other people, a clearly important aspect of successful professional life. So here‚Äôs the advice someone gave me:  Join 1 club that involves your academic field of study. For me, this was Cyber Security Club.  Join 1 club that involves activities you would otherwise never do. I found was the Collegiate Web Developers Group, and I got to use these skills at my first internship.  Join 1 club out of pure interest. This is your chance to just enjoy yourself. I joined Cru. It was very cool and helped me develop leadership skills, pursue my faith, and make friends!If you intentionally split your free time like this, you‚Äôll enjoy school and have plenty to talk about with recruiters. Making friends, building your network, learning new skills, and giving back to the community are huge benefits just from going to clubs! Resume RefinementA resume isn‚Äôt everything, but it‚Äôs certainly important. After all, recruiters only spend 6 seconds on average looking at a resume. This can be taken one of two ways.  Recruiters don‚Äôt spend a lot of time looking at resume‚Äôs, so it‚Äôs not important. (not true) Recruiters don‚Äôt spend a lot of time looking at resume‚Äôs, so I have to make an impression and fast. (this is the true one)Your resume is your opportunity to showcase what makes you different. If you‚Äôre still in school, the general rule of thumb is under a page. If you have relevant work experience, put it on there. If you‚Äôve taken classes that employers might find particularly interesting (algorithms, data structures, team projects), highlight it! This is also your chance to showcase any volunteering you do and the ways that you are engaged in your campus community. If you are submitting electronically, go with a PDF to avoid formatting errors. Communication and ConfidenceInternships are without a doubt the best way to get your foot in the door of a company. Hiring a new employee is an incredibly labor-intensive and an expensive process. Letting an employee go is equally as taxing on the company. Internships give companies a way to hire employees, evaluate how they perform on the job, and decide if they want to continue working with that employee. If you don‚Äôt have any work experience to point to (like another internship), you have to convince the company:  You‚Äôre respectful and professional You know how to take direction and (üò±) criticism You‚Äôre incredibly excited to learnIf these are true about you, the company will likely jump at the chance to have you join their team, even without work experience, because they know you‚Äôll work as hard as you can to learn what you need. Career FairScary? Yes. Worth it? Even more yes. A lot of my peers consider the career fair a waste of time. In fact, even mentors mentioned that I wouldn‚Äôt have any luck with recruiting at the career fair while still a Freshman. If you‚Äôre feeling any of this, remember that even if you don‚Äôt get a job out of it the first time you go, you‚Äôve still made an incredible investment in yourself. Just by putting yourself out there, you‚Äôve made your next career fair experience a little bit better. You may even end up making the connections for your first job after all ‚Äî in fact, that‚Äôs what I did. It doesn‚Äôt matter if you hear ‚ÄúSorry, we aren‚Äôt looking for freshman,‚Äù 100 times ‚Äî All you need is for 1 person to say, ‚ÄúTell me more about yourself!‚Äù Every ‚Äúno‚Äù is closer to a ‚Äúyes‚Äù. Get yourself some professional clothes üëî, print a bunch of copies of your resume, and drag yourself to the career fair. Follow Up Online üë©‚ÄçüíªWhen recruiters leave career fairs, they‚Äôre undoubtedly exhausted and overwhelmed from meeting dozens to hundreds of students who seem all alike. They‚Äôll likely go through the resumes they were handed to sift through who seems like a good candidate and who doesn‚Äôt. If you spent some time researching how to make a killer resume, you‚Äôll make the ‚Äúgood‚Äù pile. Even still, they have to narrow down their applicants even further to make interviewing feasible. The best possible thing you can do after the career fair is reach out to anyone whose contact information you were given. Send recruiters you chatted with a thank you for coming out, goodness knows they work hard. Follow up on any meaningful points of conversation you shared, and ask about the next steps in the interview process. To make things easier, go ahead and send your resume along too. Odds are high you just pushed yourself to the top of the stack. Nice work! ReferralsJob referrals are the single most effective way to land an interview. If you have the contact information of someone (pretty much anyone) in the company you‚Äôre looking to get into, reach out and see if they would be willing to refer you to recruiting! For many companies, having a current employee vouch for someone is enough to shift your resume to the top of the stack. For a few, it might even get you an automatic interview üëÄ Obviously, it helps if you have an existing relationship with the person you‚Äôre asking to refer you. This is where the value of networking pays off BIG TIME. Even if you don‚Äôt, some people are willing to refer you based off some breif conversations. Every job I have applied to with a referral has resulted in at least a first round interview. This is true for all types of companies, as referrals have landed me interviews at Google, Facebook, Amazon, and JPMorgan Chase &amp; Co. The simple truth is this, people hire people, not resumes. Building relationships will be a gigantic part of your future job in technology, so why wouldn‚Äôt it be a critical part of your journey there? Interview(s)Interviewing is your chance to put your best foot forward and advocate for yourself. Make sure your interviewer knows not just that you‚Äôd be a good hire, but why you‚Äôd be a joy to work with. Oftentimes, interviewing in tech is a multi-stage process. Some companies may send out ‚Äúinterview screens,‚Äù which could be virtual get to know you questions, or some coding exercises. On a small scale, this mirrors the two formats most interviews will take: Behavioral, and Technical. Behavioral interviews are full of questions that are designed to get a feel for how you interact with people! Technical questions are designed to observe how well you understand the technology surrounding the job. Mostly, these are explicitly separated, but sometimes they‚Äôre pushed into one session. Some great ways to prepare for this are by practicing with a friend. Try and answer as many questions about yourself as you can, going back and forth with your friend! For technical questions, Leetcode is the single most effective tool at your disposal! At the end of the day, hiring someone with no experience and even no grades is an incredible risk. I was ridiculously fortunate that a company took a chance and invested in me. I‚Äôm crazy grateful, and I‚Äôd love to give back. Leave a comment below or ping me on Twitter if I can help your journey. Obviously, this task is going to take a ton of effort, but getting an internship early in your college years will pay dividends over the course of your career! Remember, only a fraction of people who apply to a job get an interview and only a fraction of those that interview get hired. To maximize your chances of success, you have to apply to many, many, many places. Attend your career fair, apply to dozens of places (online too!) and reach out to everyone you know! "
    }, {
    "id": 20,
    "url": "http://localhost:4000/should-i-learn-to-make-apps-on-ios-or-android/",
    "title": "Should I learn to make apps on iOS or Android?",
    "body": "2019/11/25 - So you‚Äôre finally taking the jump into mobile development? Soon, you‚Äôll be faced with deciding for which platform you will develop your apps. For the most part, apps written for iOS will run on iPhones, iPads, and iPods. Whereas apps written for Android will run on most any Android phone. Now there are ways to write an app for both at the same time, such as React Native or Flutter, but those are entirely different rabbit trails for another time. I‚Äôll focus here on ‚ÄòNative Development‚Äô, which is writing for each platform individually. I can speak personally here because I‚Äôve made and published apps for both platforms! I made my first mobile app for Android (see https://play. google. com/store/apps/details?id=feature. a. its. bug. a. not. its. whataretheodds), and followed up with a second one a few months later https://play. google. com/store/apps/details?id=morhous. jeffery. mockmywords.  More recently, I‚Äôve been doing freelance iOS development, which has involved making apps for a few different clients. Let‚Äôs take a look at a few different aspects of making apps for each platform. Cost of entry:This category is going to have some of the most obvious differences. Android development is done in an IDE (integrated development environment, think Microsoft Word but for making apps) called Android Studio. Android Studio will run on both Windows and Mac, and is really flexible when it comes to system requirements. You can download it here for free ‚Äî https://developer. android. com/studio/ iOS development is done in an IDE called xCode, which is made by Apple. The caveat is that xCode will only run on macOS, so you‚Äôll need to have access to a Mac. If you don‚Äôt already have a Mac, this is a pretty serious upfront investment! (The cheapest option here is probably the Mac Mini -https://www. apple. com/mac-mini/ ) Once you‚Äôve got your hands on a Mac, you can download xCode for free here https://developer. apple. com/xcode/ Fortunately, with both iOS and Android, simulators make it easy/cheap to test our apps without a physical device. However, it is still beneficial to be able to use your app with your own hands, on your own phone! If you already have an Android phone, you may find it enjoyable to test the apps you‚Äôre making on your own phone, and obviously the same is true if your have an iPhone. Audience:The next question you should be asking yourself is, who do you want to use your apps? In the United States, iPhones are radically more common than Android phones. However, globally, Android takes the cake. üéÇ Technically, Android has more users that iOS does, but if you‚Äôre in the United States, and you want the people around you to be able to use your apps, then iOS is probably the better option for you. Monetization:: If one of your goals in learning to make apps is monetization üí∞, then the platform you choose will undoubtedly affect your revenue. It‚Äôs been shown that iOS users are more likely to pay for an app (or make in-app purchases or subscriptions) than Android users are. Conversely, Android users have a higher tolerance for advertisements. In the end, if you want more users and are willing to sacrafice revenue, then Android is probably your fastest route for growth. On the other hand, you‚Äôll likely experience lower download numbers but higher in-app purchases (or outright app purchases) on iOS. Consistency:Consistency of experience is something Android will always fall short on. The wide range of hardware makes it near impossible to ensure a consistent experience on all devices. Your app could run flawlessly on the few devices you test it on, and crash constantly on another. That‚Äôs not even considering the wide range of screen sizes you‚Äôll have to account for when designing your interfaces. Apple has always maintained incredible backwards compatibility for their software updates. When a new version of iOS comes out, it makes its way onto iPhones released YEARS ago. My Android phone from 10 months ago isn‚Äôt even running the latest version of Android ü§¶üèº‚Äç‚ôÇÔ∏è. Writing any software that runs on multiple versions of operating systems adds complexity to your code and design process. This is a critical skill in software engineering, but it can be intimidating when you‚Äôre just getting started! Resources/Documentation:The question of which platform has more resources and documentation is definitely not black and white. While it is anecdotal, I‚Äôve found the iOS community to be far more helpful than Android. When you want to do something new in Android, you‚Äôll likely have trouble finding how people have approached similar problems. If you eventually do (congrats üéâ), it‚Äôs almost guranteed that you‚Äôll find multiple (often outdated) ways of doing it. Even though iOS development has some of the same issue, the internet is flooded with bulletproof ways of approaching beginner problems. It‚Äôs anecdotal, but it took me roughly a month (obviously as a hobby) to put together an Android app worth publishing. It took me a week to do the same for iOS. Your mileage may vary, but that‚Äôs enough to get me PUMPED about iOS. Publishing:To publish an App on Google Play, you must pay a 1 time fee of $20. After that, Google will scoop up 35% of any revenue you get (unless it comes from Ads, in which case that number is kind of invisible). While it is less common, you can actually distribute your app however you want. Things like other app stores, or even email are very possible. To publish an app for iOS, you can only distribute it through the App Store. Publishing on the App Store will cost you $99 a year and (yet again) 30% of all revenue. This is a more restrictive policy surrounding app distribution, but Apple uses this to ensure that apps on the app store really really want to be there. So, which is it?Personally, I‚Äôve found iOS development to be more enjoyable than Android development. This is all in spite of the Android phone in my pocket and the little Android mascot on my desk. That being said, Android has lowered the barrier to entry of software development, allowing pretty much anyone with a computer to get an app in the hands of millions of people. There‚Äôs immeasurable value in the ecosystem Google has built here, development can just be frustrating at times. So the short answer to the question is, pick what you‚Äôre the most interested in! There‚Äôs no objective truth here.  It boils down to preference and how much money you‚Äôre willing to put up when you go to publish your app. If you don‚Äôt already own a Mac, I would definitely suggest doing some Android development to see if you‚Äôre still pumped about mobile development before dropping money on a shiny new Mac. If you‚Äôve already got a Mac, then take your pick! "
    }, {
    "id": 21,
    "url": "http://localhost:4000/buckeye-trek-exploring-silicon-valley/",
    "title": "Buckeye Trek ‚Äî Exploring Silicon Valley",
    "body": "2019/11/13 - Growing up, computers always fascinated me. Once I decided that I would be making a career out of my passion for building software, I immediately learned as much as I could about the world‚Äôs most influential technology companies. Because of this, it‚Äôs no surprise that in my head ‚ÄòSilicon Valley‚Äô grew notorious for its association with computers and innovation. I applied to the Buckeye Trek because of my genuine fascination with the Bay Area. So when I got an email letting me know that I (and 10 other CSE selected students from Ohio State)was going to be spending fall break exploring the area and its culture firsthand, my tremendous excitement was met with nervous anticipation. What is Buckeye Trek?Buckeye Trek was a unique opportunity to finally explore Silicon Valley, all while meeting wonderfully friendly people in some of the coolest companies in the world! Over a few days, we met with leaders and Alumni (often leaders that are Alumni!) at companies ranging from startups, to hardware companies, to software companies. On just the first day there, we visited Western Digital, Facebook, Google and even the Stanford Design School! The next day, we visited Clockwise, Turnitin, Microsoft, and Amazon. And the last day, we wrapped up with visiting Box! At each company visit, we typically walked through a tour of the office (each office was like a playground for geeks), allowing us to observe employees in a normal workday setting, shared a meal or snacks with Alumni, and participated in Q&amp;A with company leadership and recruiting. Outside of our office visits, we ate dinner with OSU Alumni working in the area. Honestly, getting to hear firsthand what living and working in the Bay Area is like was the most valuable part of the trip to me. I would say that anyone who is even curious about life in Silicon Valley should apply! The short time I spent there has already paid dividends in my career search. As I explore my career path, I now have connections with remarkably talented and unbelievably friendly professionals at some of the worlds most highly desired companies. Oh yeah, did I mention that the trip is paid for? There is no way I could have gone on the Trek if I had to come up with money for travel, lodging, and food. Thanks to generous donations, all I had to worry about was learning absolutely as much as I could. This leaves no excuse to not apply! As a last note, yes, the weather is as perfect as you‚Äôve heard it is. And yes, the people are just as brilliant as you‚Äôve heard they are. But nothing could prepare me for how excited people were to help us on our career paths. "
    }, {
    "id": 22,
    "url": "http://localhost:4000/hack-ohio-2018/",
    "title": "Hack OH/IO 2018 ‚Äî A Learning Adventure",
    "body": "2019/01/01 - In October of this year, 3 friends and I took a weekend off studying to lock ourselves in Ohio State‚Äôs Student Union for 24+hours of coding and mayhem. Over Breakfast, ‚ÄúIt‚Äôs Not a Bug, It‚Äôs a Feature‚Äù (that was our team name) broke down our product idea into manageable chunks, so that each person could work where they felt drawn to. We were most pulled to the Microsoft Challenge, which was to create the ‚ÄúBest AI hack utilizing Azure Cognitive Services. ‚Äù Our initial idea was to make an application that let you push a photo to Twitter, Facebook, and Instagram, first screening it for inappropriate content. Jon Soldan quickly assumed the role of AI development, working closely with generous and patient mentors from Microsoft to become familiar with Azure offerings. Bofan Wu led the team in front end development, while Nathan Smith worked to connect the two edges of the project. My main role was leveraging the Social Media API and testing of the application. Because the whole team was familiar with Java, and not Swift, we chose to create this as an Android App. We used Git (and Github) for version control, assuming that it would be easy to work simultaneously on the same code. However, we soon realized that we had far less working knowledge of Git than we had assumed. At first, I was beyond frustrated at ‚Äúwasting time‚Äù solving merge conflicts and fixing other Git related problems when I could be producing ‚Äúmore meaningful work. ‚Äù This seems to be part of the Hackathon experience though. What fun would it be if everything went according to plan? All the pain caused by version control not only saved our project from catastrophe several times over but empowered us with that invaluable experience. Still, as the day (and then night) went on, we encountered more and more obstacles toward our goal. For one, 24+ hours is a long time to work on one project. Constraints to the project kept appearing, such as the time it takes to get API access to Twitter, and Instagram‚Äôs nonexistent API access.  Originally, our app looked something like this.  Of course, we went with a dark theme. It‚Äôs simple, not elegant, and definitely MVP (minimum viable product). I pushed us to move quickly and minimally, as is called for in ‚ÄúThe Lean Startup. ‚Äù Iterating quickly, we were able to avoid wasting manpower on rabbit trails and find bugs quickly. A huge example is this first iteration ‚Äî When we realized we wouldn‚Äôt be able to implement Instagram and Twitter given the time constraint, we were able to just remove those buttons, before we had wasted time implementing their respective activities. The challenge continued as we worked to allow the user to import or take a picture. Together, we learned to request files and camera permissions, and leverage that to get an image from the user. The Google Developer Docs were infinitely helpful for applying our Java knowledge to the Android ecosystem. The next hurdle, of course, was to send the image through our backend, which picked and pulled countless data points from Azure Cognitive Services. Although we worked through the night, we ultimately hit a blocking point in connecting the front and back ends of our application. If we sent an image through our backend, it would successfully recognize nudity, alcohol, partying, and drugs, then return a probability rating.  Separately, the user could take or upload an image, and send it to Facebook, via the Facebook app. Interfacing with Facebook took considerable time, as we did not find their documentation particularly intuitive. However, once we had everything completed, the transition to the Facebook app was incredibly natural.  Here, a bug in the screening is shown, where all images are flagged for nudity with a -1 error code In the end, time became our greatest enemy. Although 24 hours felt like a long time, it was not enough to complete the user journey from image choice, to safety screen, to publishing. Separately, the safety screen worked with astounding accuracy. However, the App ended up only taking the user through image choice and posting. Our goal is to see the project to completion, and publish it to the play store! Regardless, we showed several sets of judges our unfinished product, describing our design process and choices. Although we did not win the Microsoft challenge, our app won the ‚ÄúBest New To Hackathon Award. ‚Äù Also, we placed in the 96th percentile for teamwork, 91st for creativity, 89th for intuitiveness, and the 87th percentile overall. Hack OH/IO provided an incredible opportunity for growth, teamwork, and even networking! We all are looking forward to participating again next year. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});